on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 1 * * *'

name: Python for Stable Release Version

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        name: [python]
        version: ['3.11', '3.12']
        latest_version: ['3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        run: |
          function Get-ValidVersion {
            param (
              [string]$baseVersion
            )
            $json = Invoke-RestMethod -Uri https://github.com/docker-library/python/raw/refs/heads/master/versions.json
            $version = $json.$baseVersion.version
            while ($version -match '\d+\.\d+\.\d+') {
              $url = "https://www.python.org/ftp/python/$version/python-$version-embed-amd64.zip.sig"
              try {
                $response = Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing -ErrorAction Stop
                if ($response.StatusCode -eq 200) {
                  return $version
                }
              } catch {
                # Ignore the error and continue
              }
              $versionParts = $version -split '\.'
              if ($versionParts[2] -gt 0) {
                $versionParts[2] = [int]$versionParts[2] - 1
                $version = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"
              } else {
                break
              }
            }
            throw "No valid version found for $baseVersion"
          }

          $validVersion = Get-ValidVersion -baseVersion '${{ matrix.version }}'
          Write-Output "version=$validVersion" >> $env:GITHUB_ENV
          Write-Output "Current version is $validVersion"

      - name: Create Tag
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a ${{ env.version }} -m "Release Version ${{ env.version }}"
          git push origin ${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Workspace
        run: |
          New-Item -Path . -Name "dist" -ItemType "directory"
          New-Item -Path 'C:\Program Files\JumpServer\applications' -ItemType "directory"

      - name: Setup Python
        run: |
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/${{ env.version }}/python-${{ env.version }}-embed-amd64.zip" -OutFile "python-${{ env.version }}-embed-amd64.zip"
          Expand-Archive -LiteralPath "python-${{ env.version }}-embed-amd64.zip" -DestinationPath "C:\Program Files\JumpServer\applications\Python"
          move-item -Path python-${{ env.version }}-embed-amd64.zip -Destination dist\python-${{ env.version }}-embed-amd64.zip

      - name: Setup pip
        run: |
          Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "get-pip.py"
          ./python.exe get-pip.py
        working-directory: 'C:\Program Files\JumpServer\applications\Python'

      - name: Set Module
        run: |
          $pthFile = Get-Item * -Include 'python*._pth'
          (Get-Content -Path $pthFile.FullName) -replace '#import site', 'import site' | Set-Content -Path $pthFile.FullName
        working-directory: 'C:\Program Files\JumpServer\applications\Python'

      - name: Compress Python
        run: |
          7z a -tzip ../python-${{ env.version }}-patch.zip python*._pth get-pip.py Lib Scripts
        working-directory: 'C:\Program Files\JumpServer\applications\Python'

      - name: Check File
        run: |
          move-item -Path 'C:\Program Files\JumpServer\applications\python-${{ env.version }}-patch.zip' -Destination dist\python-${{ env.version }}-patch.zip
          ls dist

      - name: Create Release
        run: |
          latestFlag=""
          if [ "${{ env.version }}" != "${{ matrix.latest_version }}" ]; then
            latestFlag="--latest=false"
          fi
          gh release create ${{ env.version }} --notes "Python for Stable Release ${{ env.version }}" $latestFlag
          gh release upload ${{ env.version }} dist/*
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}